" VIM CONFIG INSPIRED BY REAL PYTHON
" https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/

set nocompatible              " required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Manage plugins using pathogen
execute pathogen#infect()

" split navigations
set splitbelow
set splitright
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Code folding
set foldmethod=indent  	" Enable folding
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za
Plugin 'tmhedberg/SimpylFold'
let g:SimpylFold_docstring_preview=1

" Python Indentation
set fileformat=unix
au BufNewFile,BufRead *.py,*pl
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |

au BufNewFile,BufRead *.js,*.html,*.css <here>:</here>
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

Plugin 'vim-scripts/indentpython.vim'
" Flagging unnecessary whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" UTF8 Support
set encoding=utf-8

" Auto-complete
Bundle 'Valloric/YouCompleteMe'

" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

" Syntax Checking/Highlighting
Plugin 'scrooloose/syntastic'

" PEP8 checking
Plugin 'nvie/vim-flake8'

" Make the code look pretty
let python_highlight_all=1
syntax on

Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'

" Color Schemes
if has('gui_running')
  set background=dark
  colorscheme candyman
else
  colorscheme zenburn
endif
call togglebg#map("<F5>") 	" This goes with solarized theme
				" to toggle the between light and dark theme

" File browsing
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
let NERDTreeIgnore=['\.pyc$', '\~$']	"ignore files in NERDTree
" Toggle nerdtree with F10
map <F10> :NERDTreeToggle<CR>

" Super Searching
Plugin 'kien/ctrlp.vim'

" Line Numbering
set number
set numberwidth=5

" Git integration
Plugin 'tpope/vim-fugitive'

" Powerline -- status bar
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" Access system clipboard when needed
set clipboard=unnamed

" Auto-pairs for matching parens/quotes and stuff
Plugin 'jiangmiao/auto-pairs'

" Leader Mappings
map <Space> <leader>
map <Leader>w :update<CR>
map <Leader>q :qall<CR>

" Persistent undo
set undodir=~/.vim/undo/
set undofile
set undolevels=1000
set undoreload=10000

" Enable spellchecking for Markdown
autocmd FileType markdown setlocal spell

set wrap
set ignorecase
set smartcase
set cmdheight=2  		" height of the command bar
set magic  			" turn magic on for regular expressions
set hlsearch  			" search highlighting
set vb t_vb=			" No error bells

" Swap and backup in a location
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set undodir=~/.vim/undo
set backup
set writebackup
